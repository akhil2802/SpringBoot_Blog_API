"dream transforms  into thoughts, thoughts result into action"

Things to be done:
--------------------------
- Image Upload validation is not done.
- validation for category and user not done
- response for user and category must be changed with totalelements, lastpage, content etc as done in case of Post API. 
- establish relationship between user and comment. relation between post and comment is already done.
- Add funtionality to Comment API like getAllComments(), getCommentById() etc..

REST: it is a software architectural style created by Roy in 2000 to guide the design of architecture for the web.
- RE(representational): format json/xml
- State: Data
- Transfer: transfer data between parties(client-server)

* Rest guidelines or architectural constraints:
= 
> client-server architetcure: client and servers are independent to each other.
> server should be stateless.
> Cacheable
> Layered system: can be helpful in managing scalability and load balancing
> Uniform Interface: decoupling between client server
> Code on Demand(optional)

* Rest Concepts:
-----------------------
- Resources: anything that's exposed to outer world through application
- Sub-resources: resources that are belongs to main resource. For example, If Post is main resource then comment is its sub-resource. If Student is main resource then Laptops will be sub-resource.
Ex: "http://localhost:8080/{id}/sub-resource" -> "http://localhost:8080/students/12/laptops"
- URI (Uniform Resource Identifier): used to identify resource in server
- Http Request Methods: defines set of request methods to indicate the desired action to be performed for a given resource. (get,post,put etc)
- Http Response Codes: Indicate whether a specific http request has been successfully completed. Ex: 200, 404, 500 etc.

CLient Requirements:
-------------------------------
CLient wants blogging application where anybody who has account can write blogs and articles and user can comment on blogs/article.

Building Simple blogging application:
--------------------------------------------------
- User should create, update, delete & list posts
- User should add, update, delete, comments on posts
- Categories the posts according to respective fields.
- New user should be able to register
- User should able to login
- Post include one picture

Some techical terms about requirements to build application:
------------------------------------------------------------------------------------
- Proper Login & Register API
- Posts API includes pagination & sorting
- Proper user input validation handling
- Proper Exception handling
- Role based authentication-role based security with apis
- JWT based authentication
- Document all rest apis so that consumer can easy understand
- Deploy the backend application on any cloud platform(AWS)

Tools Using:
----------------
* Framework: spring boot 
- java 8+, maven, sts, tomcat, spring core, spring security(jwt), spring data jpa(hibernate) etc.
* MySQL Database
* Postman Rest Client: api testing
* Swagger: API documentation
* AWS-EC2: used for deployment

Resources for Blogging Application:
--------------------------------------------------
- User
- Category
- Post
- Comments

Best architecture while using Spring Boot for backend:
---------------------------------------------------------------------------
Postman(client) sends request -> Controller (accepts all the requests & passing to Services layer) -> Services (accepts task from controller & performs the business logics & send back the result to controller) -> Repositories/DAO (interacts with the database) -> then finally whatever the result got from services the controller sends that result back to the client with proper output 

- controller is also called as API layer where all the rest endpoints mentioned
- services is known for business logics
- repositories is known as dao layer or persistent layer.

* We have designed database ER-Diagram using draw.io website.

STS:
-------
* Dependencies Required: Spring Boot DevTools, Lombok, Speing Data JPA, MySQL Driver, Spring Web

* Site info:
--------------
- Base Url: https://start.spring.io/starter.zip 
- Full Url: https://start.spring.io/starter.zip?name=springboot-blog-app-api&groupId=com.avakhilkumar.blog&artifactId=springboot-blog-app-api&version=0.0.1-SNAPSHOT&description=This+is+the+complete+backend+API+development+using+Spring+Boot.&packageName=com.avakhilkumar.blog&type=maven-project&packaging=jar&javaVersion=17&language=java&bootVersion=3.0.1&dependencies=devtools&dependencies=lombok&dependencies=data-jpa&dependencies=mysql&dependencies=web

Basics of Validation:
---------------------------
- Java bean is validated with JSR 380 known as Bean Validation 2.0.
- JSR 380 is specification for the Java API for bean validation. Properties of bean meet the specific criteria.
- For validation different annotations is used like @NotNull, @Min, @Size etc.
- Hibernate Validator is a implementation of validation api.

Important Annotations for Validations:
-----------------------------------------------------
@NotNull
@Email
@Size
@Min
@Max
@NotEmpty etc..

How to use validation in SPringBoot:
--------------------------------------------------
- Spring Boot provides support forhibernate validator.
- We have a dependency called "spring-boot-starter-validation".

3 Steps to use validation in spring boot:
- Use dependency inside pom.xml file
- Use annotations on dto layer
- Valid this annotations by including @Valid where we're accepting the dto data. ie, in controller layer.

JWT Authentication:
-----------------------------
- jwt stands for Json Web Token
- JWT is mostly used for securing Rest API
- Best way to communicate security between client and server securely
- jwt follows a stateless authentication mechanism

Architecture of JWT:
-----------------------------
- JWT has 3 parts as shown below:

		JWT
   ------------------------------|-----------------------------------
   |                                         |                                                |
Header                      Payload                                     Signature
(Algo+type)         (info about claims)               (encoded header + encoded payload + key)

JWT Token : header.payload.signature, this token will be sent to client for future validation and authentication.

Ex:
----

Token : "eyjkgh0dnjbnf8bbfbeub.dbeububeuh898u3bhbfh7.djhfiuw93bfbhsbf93_adQssw5c"

HEADER: ALGORITHM + TOKEN TYPE -->  { "alg": "HS256", "typ": "JWT" }
PAYLOAD: DATA  -->  { "sub": "1234567890", "name": "John Doe", "iat": 1516239022 }
VERIFY SIGNATURE  --> 
	HMACSHA256 (base64UrlEncode(header) + "." + base64UrlEncode(payload), your-256-bit-secret) secret base64 encoded

How to use JWT with spring security?
---------------------------------------------------

Client:                                                                                           Server:
---------                                                                                           -------------
                        
username:                                          -------------->                   Springboot Rest APIs
password                                       <--json token---                 
                                                                                                        Rest API1 (Login API)
From postman App:                                                          
POST > http://localhost:8080/api/posts    ---token-->     Rest API 1
Headers: Bearer, Token                               ---token-->      Rest API 2          (these are secured APIs)
                                                                              ---token-->      Rest API 3


Steps to Implement JWT:
-----------------------------------
1. Add dependency(io.jsonwebtoken)
2. Create JWT authenticationEntryPoint implements AuthenticationEntryPoint (here we have a method that has to be overriden and which gets called when an unauthorized user tries to access the API which reuqires authentication)
3. Create JWTTokenHelper (contains all the methods needed to perform operation on token generation and token validaiton etc.)
4. JwtAuthenticationFilter extends OnceRequestFilter (hets and check for header and then redirect to an API)
	- get jwt token from request, format
	- validate token
	- get user from token
	- load user associated with token 
	- set spring security  (set authentication in Spring security)
- Create JwtAuthResponse (token, type token, user detail etc its our choice what we need to keep)
- Configure JWT in spring security config
- Create login api to return token
- Test the application















